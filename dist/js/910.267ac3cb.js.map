{"version":3,"file":"js/910.267ac3cb.js","mappings":"kIAAA,olP","sources":["webpack://sixt.github.io/./public/posts/g1/seq5.md"],"sourcesContent":["export default \"### 게시글 목록 페이지 만들기\\r\\n\\r\\n이제 블로그 글 목록 페이지를 만들어보자.\\r\\n<br/><br/>\\r\\n\\r\\n글 목록 페이지는 간단하게 아래 기능을 포함한다.<br/>\\r\\n&nbsp;① 한 줄에 3개씩 게시글 표시<br/>\\r\\n&nbsp;② 검색 기능<br/>\\r\\n&nbsp;③ 전체 목록을 표시하는 버튼\\r\\n&nbsp;④ 게시글을 클릭하면 상세 페이지로 이동\\r\\n<br/><br/>\\r\\n\\r\\n##### ① 한 줄에 3개씩 게시글을 표시하는 기능부터 구현해보자.<br/>\\r\\n\\r\\n우리가 최종적으로 호스팅할 Github Pages에서는 게시물 정보를 DB에서 불러오는 구조로 구현할 수 없어,<br/>\\r\\nDB를 대신할 여러가지 방법 중에서 JSON 파일에 데이터를 모델화하여 입력하고 불러오는 방식으로 구현해보자.\\r\\n<br/><br/>\\r\\n\\r\\npublic/json/\\\\_posts.json\\r\\n\\r\\n```\\r\\n[\\r\\n  {\\r\\n    \\\"seq\\\": 1,\\r\\n    \\\"fileName\\\": \\\"seq1.md\\\",\\r\\n    \\\"title\\\": \\\"GitHub Pages Blog 만들기🔨 #1\\\\n- 초기 설정\\\",\\r\\n    \\\"date\\\": \\\"2024-06-24 11:25:13\\\",\\r\\n    \\\"dateDiff\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"seq\\\": 2,\\r\\n    \\\"fileName\\\": \\\"seq2.md\\\",\\r\\n    \\\"title\\\": \\\"GitHub Pages Blog 만들기🔨 #2\\\\n- 프로젝트 구성 및 초기 화면\\\",\\r\\n    \\\"date\\\": \\\"2024-06-25 17:35:57\\\",\\r\\n    \\\"dateDiff\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"seq\\\": 3,\\r\\n    \\\"fileName\\\": \\\"seq3.md\\\",\\r\\n    \\\"title\\\": \\\"GitHub Pages Blog 만들기🔨 #3\\\\n- 초기 화면 상세\\\",\\r\\n    \\\"date\\\": \\\"2024-06-25 18:05:23\\\",\\r\\n    \\\"dateDiff\\\": null\\r\\n  },\\r\\n    {\\r\\n    \\\"seq\\\": 4,\\r\\n    \\\"fileName\\\": \\\"seq4.md\\\",\\r\\n    \\\"title\\\": \\\"GitHub Pages Blog 만들기🔨 #4\\\\n- vue-router 적용\\\",\\r\\n    \\\"date\\\": \\\"2024-06-26 17:41:55\\\",\\r\\n    \\\"dateDiff\\\": null\\r\\n  },\\r\\n]\\r\\n\\r\\n```\\r\\n\\r\\n게시물 데이터는 순번, 파일명, 제목, 작성일, 그리고 조회하는 날짜 기준 얼마 전에 작성된 게시물인지 표시할 dateDiff로 구성했다.<br/>\\r\\ndateDiff는 페이지를 불러올 때, script에서 현재 날짜 구해서 그 날짜를 기준으로 계산하여 표시할 예정이다.<br/>\\r\\n다음으로는 게시물 목록을 표시할 화면을 작성해보자.<br/>\\r\\n\\r\\n너무 길어서 하나씩 쪼개서 살펴보려고 한다.\\r\\n\\r\\n<br/><br/>\\r\\nsrc/components/LogList.vue - `<template>` 부분만\\r\\n\\r\\n```\\r\\n<template>\\r\\n  <v-row class=\\\"category\\\">\\r\\n    <v-col cols=\\\"9\\\">\\r\\n      <v-chip prepend-icon=\\\"mdi-list-box-outline\\\" link>전체보기</v-chip>\\r\\n    </v-col>\\r\\n\\r\\n    <v-col cols=\\\"3\\\">\\r\\n      <v-text-field\\r\\n        variant=\\\"underlined\\\"\\r\\n        append-icon=\\\"mdi-magnify\\\"\\r\\n        placeholder=\\\"검색어 입력\\\"\\r\\n      ></v-text-field>\\r\\n    </v-col>\\r\\n  </v-row>\\r\\n\\r\\n  <!-- 게시글 목록 표시 -->\\r\\n  <v-row v-for=\\\"(i, idx) in rows\\\" :key=\\\"i\\\" class=\\\"loggingRow\\\">\\r\\n    <v-col\\r\\n      v-for=\\\"post in displayPosts.filter((e, index) => {\\r\\n        if (index >= idx * 3 && index < (idx + 1) * 3) return e;\\r\\n      })\\\"\\r\\n      :key=\\\"post\\\"\\r\\n      cols=\\\"4\\\"\\r\\n    >\\r\\n      <v-card class=\\\"post\\\" link>\\r\\n        <v-card-title class=\\\"postTitle\\\">\\r\\n          {{ post.title }}\\r\\n        </v-card-title>\\r\\n\\r\\n        <v-divider></v-divider>\\r\\n\\r\\n        <div class=\\\"dateDiff\\\">\\r\\n          {{ post.dateDiff }}\\r\\n        </div>\\r\\n      </v-card>\\r\\n    </v-col>\\r\\n  </v-row>\\r\\n</template>\\r\\n```\\r\\n\\r\\n화면에 게시글 목록을 표시하는 부분을 보면, v-for라는 함수를 사용한다.<br/>\\r\\nvue에서 제공하는 반복문 함수로 1줄에 3개 씩 쪼개서 출력하고 있다.<br/>\\r\\n여기서 displayPosts라는 변수는 `<script>` 태그에 명시한 데이터 변수로, 해당 변수의 값을 변경하면 화면도 동적으로 변경된다.<br/>\\r\\n아래 변수 값을 설정하는 부분을 살펴보자.\\r\\n<br/><br/>\\r\\n\\r\\nsrc/components/LogList.vue - `<script>` + `<style>` 부분만\\r\\n\\r\\n```\\r\\n<script>\\r\\nimport posts from \\\"/public/json/_posts.json\\\"; // 게시글 json파일 import\\r\\n\\r\\nexport default {\\r\\n  name: \\\"loggingList\\\",\\r\\n  data() {\\r\\n    return {\\r\\n      displayPosts: null,\\r\\n      rows: 0,\\r\\n    };\\r\\n  },\\r\\n  created() {\\r\\n    // vue 생성 시\\r\\n    // ① data 기본 세팅\\r\\n    this.displayPosts = this.getAllPosts(posts);\\r\\n    this.rows = Math.ceil(this.displayPosts.length / 3); // row 수 구하기\\r\\n  },\\r\\n  mounted() {\\r\\n    // vue dom mount완료 시 (== document.ready())\\r\\n    // ② element 요소 기본 세팅\\r\\n    this.setPostBg();\\r\\n  },\\r\\n  methods: {\\r\\n    // 게시글 전체 가져오기\\r\\n    getAllPosts(posts) {\\r\\n      // json 파일 javascript 배열형태로 표시\\r\\n      let tmpPostsList = JSON.parse(JSON.stringify(posts));\\r\\n\\r\\n      // 작성일로부터의 날짜 차이 설정\\r\\n      this.dateDiff(tmpPostsList);\\r\\n\\r\\n      // seq 역순으로 정렬하여 return\\r\\n      return tmpPostsList.sort(function (a, b) {\\r\\n        return b.seq - a.seq;\\r\\n      });\\r\\n    },\\r\\n    // dateDiff 설정\\r\\n    dateDiff(posts) {\\r\\n      let rst = \\\"\\\";\\r\\n\\r\\n      for (var i in posts) {\\r\\n        var dateParam = posts[i].date.substr(0, 10).split(\\\"-\\\"); // date 값 년,월,일로 분할한 배열\\r\\n        var timeParam = posts[i].date.substr(10).trim().split(\\\":\\\"); // date 값 시,분,초로 분할한 배열\\r\\n\\r\\n        // milliseconds로 오늘과 작성일의 차이를 구함\\r\\n        let diff =\\r\\n          new Date().getTime() -\\r\\n          new Date(\\r\\n            dateParam[0],\\r\\n            dateParam[1] - 1,\\r\\n            dateParam[2],\\r\\n            timeParam[0],\\r\\n            timeParam[1],\\r\\n            timeParam[2]\\r\\n          ).getTime();\\r\\n\\r\\n        // millisecond / 1000 => 초단위로 변경\\r\\n        var t = Math.ceil(diff / 1000);\\r\\n\\r\\n        if (t < 60) {\\r\\n          // t가 60초 보다 작으면 n초 전\\r\\n          rst = t + \\\"초 전\\\";\\r\\n        } else if (t >= 60 && t < 60 * 60) {\\r\\n          // t가 60초보다 크거나 같고 60분보다 작으면 n분 전\\r\\n          rst = Math.ceil(t / 60) + \\\"분 전\\\";\\r\\n        } else if (t >= 60 * 60 && t < 60 * 60 * 24) {\\r\\n          // t가 60분보다 크거나 같고 24시간보다 작으면 n시간 전\\r\\n          rst = Math.ceil(t / (60 * 60)) + \\\"시간 전\\\";\\r\\n        } else if (t >= 60 * 60 * 24 && t < 60 * 60 * 24 * 30) {\\r\\n          // t가 24시간보다 크거나 같고 30일보다 작으면 n일 전\\r\\n          rst = Math.ceil(t / (60 * 60 * 24)) + \\\"일 전\\\";\\r\\n        } else if (t >= 60 * 60 * 24 * 30 && t < 60 * 60 * 24 * 365) {\\r\\n          // t가 30일보다 크거나 같고 365일보다 작으면 n개월 전\\r\\n          rst = Math.ceil(t / (60 * 60 * 24 * 30)) + \\\"개월 전\\\";\\r\\n        } else if (t >= 60 * 60 * 24 * 365) {\\r\\n          // t가 365일보다 크거나 같으면 n년 전\\r\\n          rst = Math.ceil(t / (60 * 60 * 24 * 365)) + \\\"년 전\\\";\\r\\n        }\\r\\n\\r\\n        // dateDiff에 값 설정\\r\\n        posts[i].dateDiff = rst;\\r\\n      }\\r\\n    },\\r\\n    // 랜덤 배경색 설정\\r\\n    setPostBg() {\\r\\n      let postTitle = document.querySelectorAll(\\\".postTitle\\\");\\r\\n\\r\\n      for (var i = 0; i < postTitle.length; i++) {\\r\\n        var rColor = Math.floor(Math.random() * 256);\\r\\n        var gColor = Math.floor(Math.random() * 256);\\r\\n        var bColor = Math.floor(Math.random() * 256);\\r\\n\\r\\n        postTitle[i].style.backgroundColor =\\r\\n          \\\"rgb(\\\" + rColor + \\\",\\\" + gColor + \\\",\\\" + bColor + \\\", 0.1)\\\";\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n};\\r\\n</script>\\r\\n\\r\\n<style lang=\\\"scss\\\">\\r\\n.category {\\r\\n  margin: 0.3rem;\\r\\n}\\r\\n\\r\\n.post:hover {\\r\\n  top: -0.3em;\\r\\n  box-shadow: 0.3em 0.3em 1em lightgray;\\r\\n}\\r\\n.v-card-title {\\r\\n  display: flex !important;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  text-align: center;\\r\\n  white-space: pre-wrap !important;\\r\\n  height: 10em;\\r\\n}\\r\\n\\r\\n.keywords {\\r\\n  padding: 0.3rem;\\r\\n  height: 6em;\\r\\n\\r\\n  .keyword {\\r\\n    margin: 0.2rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n.dateDiff {\\r\\n  padding: 10px 20px 10px 20px;\\r\\n  text-align: right;\\r\\n  font-style: italic;\\r\\n  color: darkgrey;\\r\\n}\\r\\n</style>\\r\\n\\r\\n```\\r\\n\\r\\n쓰다보니 너무 복잡하다..🤦‍♂️<br/>\\r\\nscript 부분을 하나씩 떼어내서 살펴보자.\\r\\n<br/><br/>\\r\\n\\r\\n&nbsp;① data()<br/>\\r\\n­ + 화면에서 사용할 동적으로 바인딩되는 데이터<br/>\\r\\n­ + json 파일을 parsing하여 배열 형태의 게시글 전체 데이터와 3개씩 표시했을 때 row의 개수를 정의했다.<br/>\\r\\n­ + 이 데이터를 template에서 v-for문으로 불러와 조건에 맞게 출력했다.<br/>\\r\\n­­ + template에서 같은 vue파일 내 script 변수를 불러올 때는 변수명을 그대로 입력 (this.displayPosts (x) / displayPosts (o))\\r\\n<br/><br/>\\r\\n\\r\\n&nbsp;② created()<br/>\\r\\n­­ + vue 파일이 로드되어 생성된 상태로 아직 html element가 생성되기 전이다.<br/>\\r\\n­­ + data와 같이 element 요소 생성 전 미리 설정할 값을 이 부분에서 작업한다.<br/>\\r\\n­­ + 아래 methods 에 정의한 메서드를 불러올 때는 this.메서드명으로 불러온다.\\r\\n<br/><br/>\\r\\n\\r\\n&nbsp;③ mounted()<br/>\\r\\n­­ + html element가 생성된 이 후이다. document.ready()와 같은 개념이라고 볼 수 있다.<br/>\\r\\n­­ + 게시글 제목이 출력되는 element의 랜덤으로 배경색을 설정하는 메서드를 실행했다.<br/>\\r\\n­­ + 가끔,,아니 꽤나 자주 mounted()에서도 element를 찾지 못하는 경우가 있는데 필요에 따라 async-await나 setTimeout등을 사용하여 sync를 맞추어주어야 한다.<br/>\\r\\n­­ + 아래 methods 에 정의한 메서드를 불러올 때는 this.메서드명으로 불러온다.\\r\\n<br/><br/>\\r\\n\\r\\n&nbsp;④ methods<br/>\\r\\n­­ + 해당 vue에서 사용할 메서드들을 정의한다.\\r\\n\\r\\n<br/><br/>\\r\\n\\r\\n다음 포스트에서는 제목 검색 게시글을 검색하여 리스트를 변경하는 기능을 구현해보겠다.😎\\r\\n\";"],"names":[],"sourceRoot":""}