{"version":3,"file":"js/557.95335673.js","mappings":"kIAAA,++E","sources":["webpack://sixt.github.io/./public/posts/g1/seq4.md"],"sourcesContent":["export default \"### vue-router 사용하기\\r\\n\\r\\nvue-router는 url에 따라서 필요한 특정 컴포넌트만 변경하도록 하는 방식이다.\\r\\n<br/><br/>\\r\\n화면 상으로 페이지 전환이 부드럽고 페이지가 전환되어도 변수의 값이 유지되는게 장점이고,<br/>\\r\\n반대로 페이지, 로그인 정보 등 수시로 초기화 해야하거나 url을 입력 시 404 에러가 발생하는 단점도 있다.<br/>\\r\\n그래도 직접 쓰면서 발견한 단점들은 어느정도 보완하는 방법을 찾았기 때문에 유용함이 더 크다.<br/>\\r\\n이전 포스트에서 말한대로 ContentView.vue 파일에 router를 사용하기 위해 router 설정부터 시작해보자.<br/>\\r\\n\\r\\n우선 contentView.vue에 router로 들어갈 component를 만들어야한다.\\r\\n<br/><br/>\\r\\nsrc/components/MainPage.vue\\r\\n\\r\\n```\\r\\n<template>\\r\\n  <div id=\\\"main\\\">\\r\\n    <h1>금방 만들어보겠습니다🙋‍♂️</h1>\\r\\n  </div>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\nexport default {\\r\\n  name: \\\"mainPage\\\",\\r\\n};\\r\\n</script>\\r\\n\\r\\n<style>\\r\\n#main {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-content: center;\\r\\n  flex-wrap: wrap;\\r\\n  height: 100%;\\r\\n}\\r\\n</style>\\r\\n```\\r\\n\\r\\n다음으로는 router를 설정하는 index.js 파일을 수정해야한다.\\r\\n<br/><br/>\\r\\n\\r\\nsrc/router/index.js\\r\\n\\r\\n```\\r\\nimport { createRouter, createWebHistory } from \\\"vue-router\\\";\\r\\nimport MainPage from \\\"@/components/MainPage.vue\\\";\\r\\n\\r\\nconst routes = [\\r\\n  {\\r\\n    path: \\\"/\\\",\\r\\n    name: \\\"MainPage\\\",\\r\\n    component: MainPage,\\r\\n  },\\r\\n];\\r\\n\\r\\nconst router = createRouter({\\r\\n  history: createWebHistory(process.env.BASE_URL),\\r\\n  routes,\\r\\n});\\r\\n\\r\\nexport default router;\\r\\n```\\r\\n\\r\\n아까 만든 MainPage.vue 파일을 import하고, routes 배열 안에 MainPage를 추가해준다.<br/>\\r\\n&nbsp;① path : 해당 페이지와 매핑될 url을 적어준다.<br/>\\r\\n&nbsp;② name : router에서 해당 페이지를 인식하는 이름<br/>\\r\\n&nbsp;③ component : 실제로 화면에 표시될 component 파일, import한 vue파일의 변수명을 입력한다.\\r\\n<br/><br/>\\r\\n\\r\\n다음으로 App.vue에서 router를 사용할 수 있도록 main.js에 추가해준다.<br/>\\r\\n\\r\\nsrc/main.js\\r\\n\\r\\n```\\r\\nimport { createApp } from \\\"vue\\\";\\r\\nimport App from \\\"./App.vue\\\";\\r\\nimport router from \\\"./router\\\"; // 추가\\r\\nimport vuetify from \\\"./plugins/vuetify\\\";\\r\\n\\r\\nlet app = createApp(App);\\r\\n\\r\\napp\\r\\n  .use(router) // 추가\\r\\n  .use(vuetify)\\r\\n  .mount(\\\"#app\\\");\\r\\n```\\r\\n\\r\\n이렇게 router 사용을 위한 설정을 마쳤고, 이제 실제로 router를 사용해보자.<br/>\\r\\nrouter가 들어갈 ContentView.vue RouterView만 추가해주면 끝이다.\\r\\n<br/><br/>\\r\\n\\r\\nsrc/views/ContentView.vue\\r\\n\\r\\n```\\r\\n<template>\\r\\n  <div id=\\\"contents\\\">\\r\\n    <RouterView />\\r\\n  </div>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\nexport default {\\r\\n  name: \\\"contentSection\\\",\\r\\n};\\r\\n</script>\\r\\n\\r\\n<style lang=\\\"scss\\\">\\r\\n#contents {\\r\\n  height: 100%;\\r\\n  padding-left: 10px;\\r\\n}\\r\\n</style>\\r\\n```\\r\\n\\r\\n이렇게 하면, URL 변경을 router가 감지하고, index.js파일에 정의한 route 중 path와 url이 같은 component를 RouterView 태그 안에 mount한다.\\r\\n<br/><br/>\\r\\n\\r\\n다음은 블로그 글 리스트 페이지를 만들어보자.\\r\\n\";"],"names":[],"sourceRoot":""}