{"version":3,"file":"js/772.95e6f782.js","mappings":"kIAAA,syL","sources":["webpack://sixt.github.io/./public/posts/g1/seq3.md"],"sourcesContent":["export default \"### App.vue\\r\\n\\r\\n우선 App.vue 파일 소스를 먼저 들여다보자.<br/><br/>\\r\\n\\r\\nApp.vue 파일은 vue의 최상위 부모 페이지이다. 첫 번째 포스트에서 main.js에 사용할 dependency를 나열하여 적용했다.<br/>\\r\\n다시 들여다보면 나열한 dependency를 결국 import해놓았던 App.vue에 mount한 것을 볼 수 있다.<br/>\\r\\n그래서 main.js에 선언한 dependency를 App.vue에서 불러와서 쓸 수 있다.\\r\\n<br/><br/>\\r\\n\\r\\n① `<script setup>`\\r\\n\\r\\n­ + import해야 할 vue 파일을 선언했다. import ${변수명} from ${파일 경로}; 와 같은 형태로 선언한다.<br/>\\r\\n­ + 파일 경로에 '@/'는 실제로는 'src/'로 변환되며, jsconfig.json 파일에 paths 속성에 기본으로 설정되어 있고 마음대로 추가/수정할 수도 있다.\\r\\n\\r\\n```\\r\\n<script setup>\\r\\nimport MenuView from \\\"@/views/MenuView.vue\\\";\\r\\nimport ContentView from \\\"@/views/ContentView.vue\\\";\\r\\n</script>\\r\\n```\\r\\n\\r\\n② `<template>`\\r\\n\\r\\n­ + [Vuetify🔗](https://vuetifyjs.com/en/components/all/#form-inputs-and-controls)에서 제공하는 Grid component인 v-row로 메뉴(3) : 컨텐츠(9) 로 나누었다.<br/>\\r\\n­ + 그 안에 위에서 import한 MenuView와 ContentView를 적용했다.<br/>\\r\\n\\r\\n```\\r\\n<template>\\r\\n  <v-container id=\\\"container\\\">\\r\\n    <v-row id=\\\"main\\\">\\r\\n      <v-col cols=\\\"3\\\" id=\\\"menu\\\">\\r\\n        <MenuView />\\r\\n      </v-col>\\r\\n      <v-col cols=\\\"9\\\">\\r\\n        <ContentView />\\r\\n      </v-col>\\r\\n    </v-row>\\r\\n  </v-container>\\r\\n</template>\\r\\n```\\r\\n\\r\\n③ `<script>`\\r\\n\\r\\n­ + vue의 생성 주기에 따른 script 소스, vue파일에서 사용할 model 부분이 모두 들어가는데 나중에 좀 더 상세히 알아보자.\\r\\n\\r\\n```\\r\\n<script>\\r\\nexport default {\\r\\n  name: \\\"app\\\",\\r\\n};\\r\\n</script>\\r\\n```\\r\\n\\r\\n④ `<style>`\\r\\n\\r\\n­ + template에 들어가는 html을 디자인하는 부분이다.<br/>\\r\\n­ + scss로 작성했고, [Vuetify🔗](https://vuetifyjs.com/en/components/all/#form-inputs-and-controls) component의 class 명을 가지고 나름의 커스텀 작업을 했다.<br/>\\r\\n­ + style은 욕심 있으신 분들은 직접 작성하고, 디자인이 별로 상관없다면 그대로 긁어서 사용하자.<br/>\\r\\n\\r\\n```\\r\\n<style lang=\\\"scss\\\">\\r\\n.v-container {\\r\\n  padding-top: 3rem !important;\\r\\n  min-height: 800px;\\r\\n\\r\\n  #main {\\r\\n    height: auto;\\r\\n    padding: 0;\\r\\n  }\\r\\n\\r\\n  #menu {\\r\\n    height: auto;\\r\\n    padding-left: 1em;\\r\\n    padding-right: 3em;\\r\\n  }\\r\\n}\\r\\n</style>\\r\\n```\\r\\n\\r\\n### MenuView.vue\\r\\n\\r\\n다음은 메뉴 소스를 보자.<br/>\\r\\n참고로 App.vue를 제외한 모든 .vue 파일은 'Menu'+'View'처럼 2개 이상의 단어를 조합하는 형태로 파일명을 지어야하는 규칙이 있다.\\r\\n<br/><br/>\\r\\n\\r\\n① `<template>`\\r\\n\\r\\n­ + 역시 [Vuetify](https://vuetifyjs.com/en/components/all/#form-inputs-and-controls)에서 제공하는 v-list, v-icon등을 사용해서 완성했다.<br/>\\r\\n­ + @click은 vue에서 해당 엘리먼트에 이벤트를 바인딩하는 방식이다. 아래 v-icon 을 클릭하면, newWindow라는 method를 실행하고 git 주소를 파라미터로 넘긴다.\\r\\n\\r\\n```\\r\\n<template>\\r\\n  <v-layout id=\\\"menuSection\\\">\\r\\n    <!-- 최상단 프로필 부분 start -->\\r\\n    <v-list id=\\\"profile\\\">\\r\\n      <v-list-item\\r\\n        prepend-avatar=\\\"${프로필 사진}\\\"\\r\\n        title=\\\"${프로필 이름}\\\"\\r\\n        subtitle=\\\"${메일 주소}\\\"\\r\\n      >\\r\\n        <div id=\\\"social\\\">\\r\\n          <v-icon\\r\\n            icon=\\\"mdi-github\\\"\\r\\n            @click=\\\"newWindow(`${깃 주소}`)\\\"\\r\\n          />\\r\\n        </div>\\r\\n      </v-list-item>\\r\\n    </v-list>\\r\\n    <!-- 최상단 프로필 부분 end -->\\r\\n\\r\\n    <v-divider></v-divider>\\r\\n\\r\\n    <!-- 메뉴 item 부분 start -->\\r\\n    <v-list density=\\\"compact\\\" nav id=\\\"nav\\\">\\r\\n      <v-list-item\\r\\n        prepend-icon=\\\"mdi-note-edit-outline\\\"\\r\\n        title=\\\"LOGGING\\\"\\r\\n        value=\\\"blog\\\"\\r\\n        class=\\\"navItems\\\"\\r\\n      >\\r\\n      </v-list-item>\\r\\n    </v-list>\\r\\n    <!-- 메뉴 item 부분 end -->\\r\\n  </v-layout>\\r\\n</template>\\r\\n```\\r\\n\\r\\n② `<script>`\\r\\n\\r\\n­ + data, methods라는 새로운 속성이 등장했다. 이외에도 create(), mounted(), watch 등등 여러가지를 사용할 수 있다.<br/>\\r\\n­ + data : return 안에 예시처럼 속성을 명시해주고 값을 변경하여 동적으로 사용할 수 있다.<br/>\\r\\n­ + methods : 말 그대로 사용할 method들을 정의해놓는 곳이다. 콤마로 구분하여 나열한다.\\r\\n\\r\\n```\\r\\n<script>\\r\\nexport default {\\r\\n  name: \\\"menuView\\\",\\r\\n  data() {\\r\\n    return {\\r\\n        /* 예시\\r\\n        menu: null,\\r\\n        items: [],\\r\\n        */\\r\\n    };\\r\\n  },\\r\\n  methods: {\\r\\n    newWindow(url) {\\r\\n      window.open(\\\"about:blank\\\").location.href = url;\\r\\n    },\\r\\n  },\\r\\n};\\r\\n</script>\\r\\n```\\r\\n\\r\\n③ `style`\\r\\n\\r\\n­ + style은 자세히 설명할만한 건 딱히 없고, 프로필 이미지와 깃 허브 아이콘에 마우스 오버하면 1.15배 커지게 만드는 잔기술 정도가 들어갔다.\\r\\n\\r\\n```\\r\\n#menuSection {\\r\\n  display: block;\\r\\n  position: relative;\\r\\n  height: 90vh;\\r\\n  background-color: rgba(247, 165, 1, 0.65);\\r\\n  border-radius: 10px;\\r\\n  padding: 10px;\\r\\n  box-shadow: 0.3em 0.3em 1em lightgray;\\r\\n\\r\\n  transition: all 10ms linear;\\r\\n\\r\\n  /* v-list custom */\\r\\n  .v-list {\\r\\n    background-color: transparent;\\r\\n    color: #1a1a1a;\\r\\n\\r\\n    .v-list-item-title {\\r\\n      font-weight: 400;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /* profile section custom */\\r\\n  #profile {\\r\\n    width: 100%;\\r\\n    margin-bottom: 10px;\\r\\n\\r\\n    .v-avatar {\\r\\n      width: 150px;\\r\\n      height: 150px;\\r\\n      background-color: ghostwhite;\\r\\n    }\\r\\n    .v-avatar img {\\r\\n      width: 100%;\\r\\n    }\\r\\n    .v-avatar:hover {\\r\\n      cursor: pointer;\\r\\n    }\\r\\n    .v-avatar:hover img {\\r\\n      transition-property: all; /*모든부분 변화*/\\r\\n      transition-duration: 0.2s; /*0.2s동안 변화*/\\r\\n      transition-timing-function: linear; /*일정한 속도로 변화*/\\r\\n      transition-delay: 0; /*즉시변화-> 0이 default값이므로 생략 가능*/\\r\\n      transform: scale(1.15); /* 1.15배 크기로 변화*/\\r\\n    }\\r\\n\\r\\n    div#social {\\r\\n      margin-top: 10px;\\r\\n\\r\\n      .v-icon {\\r\\n        padding: 18px !important;\\r\\n        cursor: pointer;\\r\\n      }\\r\\n\\r\\n      .v-icon:hover {\\r\\n        transition-property: all; /*모든부분 변화*/\\r\\n        transition-duration: 0.2s; /*0.2s동안 변화*/\\r\\n        transition-timing-function: linear; /*일정한 속도로 변화*/\\r\\n        transition-delay: 0; /*즉시변화-> 0이 default값이므로 생략 가능*/\\r\\n        transform: scale(1.15); /* 1.15배 크기로 변화*/\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /* nav section custom */\\r\\n  #nav .navItems {\\r\\n    margin: 0.2rem;\\r\\n    padding: 1.2rem;\\r\\n    font-size: 1.2rem;\\r\\n\\r\\n    .v-list-item-title {\\r\\n      text-align: center;\\r\\n      font-size: 1.2rem;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n마지막 ContentView.vue 파일은 아직은 소스가 간단해서 별다르게 설명할 점이 없다.<br/>\\r\\n다음 포스트에서 RouterView를 사용하는 방식으로 변경하면서 설명을 이어가겠다.🙋‍♂️\\r\\n<br/><br/>\\r\\n\";"],"names":[],"sourceRoot":""}