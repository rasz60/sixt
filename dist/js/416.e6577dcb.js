"use strict";(self["webpackChunksixt_github_io"]=self["webpackChunksixt_github_io"]||[]).push([[416],{5416:function(r,n,t){t.r(n),n["default"]='### 게시글 상세 페이지\r\n\r\n저번 포스트에서 검색과 전체 보기 기능을 구현했다.<br/>\r\n이번에는 마지막으로 상세 페이지로 이동하고 게시글 내용을 표시해보도록 하겠다.\r\n<br/><br/>\r\n\r\n&nbsp;① 한 줄에 3개씩 게시글 표시 - 완료<br/>\r\n&nbsp;② 검색 기능 - 완료<br/>\r\n&nbsp;③ 전체 목록을 표시하는 버튼 - 완료<br/>\r\n&nbsp;④ 게시글을 클릭하면 상세 페이지로 이동\r\n<br/><br/>\r\n\r\n##### ④ 게시글 클릭하면 상세 페이지로 이동\r\n\r\n먼저 작성한 게시물을 불러오는 url은 /log/${seq} 형태이다.<br/>\r\nseq는 \\_posts.json 파일에 작성한 메타 데이터에 들어있는 seq를 보내려고 한다.<br/>\r\n이 url이 동작하려면 2가지 설정이 필요하다.\r\n<br/><br/>\r\n\r\n&nbsp;⑴ 게시글 목록에서 게시글 클릭 시 url 이동<br/>\r\n&nbsp;⑵ 변경된 url을 router가 감지할 수 있도록 router 설정 추가\r\n<br/><br/>\r\n\r\n메뉴 화면 작성 시 사용했던 router-link로 post 블럭을 감싸 클릭하면 \'/log/${seq}\' url로 이동하도록 설정했다.\r\n<br/><br/>\r\n\r\nsrc/components/LogList.vue\r\n\r\n```\r\n<template>\r\n  .\r\n  .\r\n  <v-row v-for="(i, idx) in rows" :key="i" class="loggingRow">\r\n    <v-col\r\n      v-for="post in displayPosts.filter((e, index) => {\r\n        if (index >= idx * 3 && index < (idx + 1) * 3) return e;\r\n      })"\r\n      :key="post"\r\n      cols="4"\r\n    >\r\n      <router-link :to="`/log/`+post.seq">\r\n        <v-card class="post" link>\r\n        .\r\n        .\r\n        </v-card>\r\n      </router-link>\r\n    </v-col>\r\n  </v-row>\r\n  .\r\n  .\r\n</template>\r\n.\r\n.\r\n<style>\r\n.\r\n.\r\n.linkPost {\r\n  text-decoration: none;\r\n}\r\n.\r\n.\r\n</style>\r\n\r\n```\r\n\r\n다음은 router 설정에 /log/${seq}를 추가해주어야 한다. 동적인 변수를 binding하는 방법은 아래와 같다.\r\n<br/><br/>\r\n\r\nsrc/router/index.js\r\n\r\n```\r\nimport { createRouter, createWebHistory } from "vue-router";\r\nimport MainPage from "@/components/MainPage.vue";\r\nimport LogList from "@/components/LogList.vue";\r\nimport LogDetails from "@/components/LogDetails.vue"; // 추가\r\n\r\nconst routes = [\r\n  .\r\n  .\r\n  .\r\n    {\r\n    path: "/log/:seq",\r\n    name: "logDetails",\r\n    component: LogDetails,\r\n    }, // 추가\r\n  ];\r\n  .\r\n  .\r\n  .\r\n```\r\n\r\n/log/${seq} url을 호출하면, LogDetails.vue을 불러오도록 설정하였고, parameter로 넘어온 seq를 component 안에서 변수처럼 사용할 수 있다.<br/>\r\n다음으로는 LogDetails.vue를 생성했다.\r\n<br/><br/>\r\n\r\nsrc/components/LogDetails.vue\r\n\r\n```\r\n<template>\r\n  <v-card id="details">\r\n    <v-card-title id="detailsTitle">\r\n      {{ post.title }}\r\n    </v-card-title>\r\n\r\n    <span id="subTitle">{{ post.date }}</span>\r\n    <div id="btnBox">\r\n      <v-btn\r\n        size="small"\r\n        prepend-icon="mdi-format-list-bulleted"\r\n        @click="this.$router.push(\'/log\')"\r\n        color="secondary"\r\n        >go to list</v-btn\r\n      >\r\n    </div>\r\n    <v-divider></v-divider>\r\n    <div id="doc" v-html="contents"></div>\r\n  </v-card>\r\n</template>\r\n\r\n<script>\r\n// 전체 posts json\r\nimport posts from "/public/json/_posts.json";\r\n// markdown(.md) 파일 html로 convert\r\nimport htmlConverter from "@/utils/HTMLConverter";\r\n\r\nexport default {\r\n  name: "LogDetails",\r\n  data() {\r\n    return {\r\n      post: null,\r\n      contents: null,\r\n    };\r\n  },\r\n  created() {\r\n    // 게시물 가져오기\r\n    this.setPost();\r\n  },\r\n  methods: {\r\n    async setPost() {\r\n      // router에 parameter 가져오기\r\n      const param = this.$route.params.seq;\r\n\r\n      // 전체 포스트에서 parameter의 seq와 같은 포스트만 가져와 data 저장\r\n      this.post = JSON.parse(JSON.stringify(posts)).filter(\r\n        (e) => e.seq == param\r\n      )[0];\r\n\r\n      // 실제 파일 import\r\n      const post = await import("/public/posts/" + this.post.fileName);\r\n\r\n      // markdown(.md) 파일 html로 convert하여 data 저장\r\n      this.contents = htmlConverter(post.default);\r\n    },\r\n  },\r\n};\r\n<\/script>\r\n\r\n<style lang="scss">\r\n#detailsTitle {\r\n  justify-content: center;\r\n  font-size: 30px;\r\n  width: 100%;\r\n  height: auto;\r\n  padding-top: 3em;\r\n  padding-bottom: 1em;\r\n  font-weight: 700;\r\n}\r\n\r\n#subTitle {\r\n  display: flex;\r\n  justify-content: center;\r\n  color: darkgray;\r\n}\r\n\r\n#btnBox {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  padding: 20px;\r\n}\r\n\r\n#doc {\r\n  padding: 20px;\r\n\r\n  * {\r\n    margin: 5px;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 2em;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1.8em;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 1.6em;\r\n  }\r\n\r\n  h4 {\r\n    font-size: 1.4em;\r\n    margin: 1rem;\r\n  }\r\n\r\n  h5 {\r\n    font-size: 1.2em;\r\n    margin: 0.8rem;\r\n  }\r\n\r\n  h6 {\r\n    font-size: 1em;\r\n    margin: 0.6rem;\r\n  }\r\n\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    padding-bottom: 1.2rem;\r\n    margin-bottom: 1.2rem;\r\n    border-bottom: 1px solid lightgray;\r\n  }\r\n\r\n  h6 {\r\n    color: darkgray;\r\n    font-weight: 400;\r\n  }\r\n\r\n  code {\r\n    background-color: #f7f7f7;\r\n    padding: 5px;\r\n    border-radius: 10px;\r\n    margin: 0.3em;\r\n    font-weight: 500;\r\n  }\r\n\r\n  pre {\r\n    background-color: #f7f7f7;\r\n    padding: 15px;\r\n    border-radius: 10px;\r\n    margin: 1em;\r\n    white-space: pre-wrap;\r\n\r\n    code {\r\n      padding: 0;\r\n      background-color: transparent;\r\n      border-radius: none;\r\n      margin: 0;\r\n      font-weight: 400;\r\n    }\r\n  }\r\n\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n\r\n  a:hover {\r\n    background-color: aliceblue;\r\n  }\r\n\r\n  hr {\r\n    margin-top: 2em;\r\n    margin-bottom: 2em;\r\n  }\r\n}\r\n</style>\r\n\r\n```\r\n\r\n그리고 showdown을 이용하여 markdown 파일을 html 형식으로 변환해주는 .js 파일도 추가했다.\r\n<br/><br/>\r\n\r\nsrc/utils/HTMLConverter.js\r\n\r\n```\r\nimport showdown from "showdown";\r\n\r\nconst htmlConverter = (md) => {\r\n  const converter = new showdown.Converter();\r\n  return converter.makeHtml(md);\r\n};\r\n\r\nexport default htmlConverter;\r\n```\r\n\r\n상세 페이지 기본적인 동작은 이렇다.\r\n<br/><br/>\r\n\r\n① 게시글 리스트에서 특정 게시글 클릭 시, /log/${seq} url로 이동<br/>\r\n② router에서 url을 감지하여 #contents 엘리먼트에 LogDetails.vue 페이지 출력<br/>\r\n③ LogDetails.vue created() 단에서 setPosts() 호출<br/>\r\n④ this.$route.param은 url로 넘어온 파라미터를 담고있는 객체로, router 설정 js에서 path에 \':변수명\'으로 적어놓은 파라미터를 담고있다.<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seq로 넘겨준 변수를 받아, 전체 포스트 중 seq가 같은 포스트만 가져와 data post에 바인딩했다.<br/>\r\n⑤ src/utils/HTMLConverter.js의 htmlConverter() 메서드 호출<br/>\r\n⑥ 선택한 게시물의 실제 파일명의 markdown(.md) 파일을 html 형식 텍스트로 변환하여 return<br/>\r\n⑦ html 텍스트를 data content 변수에 저장<br/>\r\n⑧ content 변수를 model로 하는 div#doc element안에 render\r\n<br/><br/>\r\n\r\n그리고 화면 우측 상단에 다시 게시물 목록으로 돌아가는 버튼을 추가했다.<br/>\r\n해당 버튼은 vuetify가 제공하는 v-btn을 사용했고, @click 이벤트에 this.$router.push() 메서드를 호출했다.<br/>\r\n다음과 같이 정의하면 router-link가 화면을 이동하는 방식과 동일하게 url 이동과 화면 변경을 할 수 있다.\r\n<br/><br/>\r\n\r\n지금까지 Vue3를 활용하여 기본적인 블로그를 만들어보았다.<br/>\r\n지금 보고있는 블로그는 이 것을 조금 더 확장, 발전시킨 것이다.<br/>\r\n블로그 만들기는 여기에서 종료하고, 다음으로는 Github Pages를 이용하여 블로그를 배포해보자.😎\r\n'}}]);
//# sourceMappingURL=416.e6577dcb.js.map