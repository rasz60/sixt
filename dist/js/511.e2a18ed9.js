"use strict";(self["webpackChunksixt_github_io"]=self["webpackChunksixt_github_io"]||[]).push([[511],{511:function(r,n,s){s.r(n),n["default"]='### 게시글 목록 페이지 만들기\r\n\r\n저번 포스트에서는 블로그 글 목록 페이지를 만들어보았다.<br/>\r\n다음으로 목록 페이지에 부여하기로 했던 기능들을 순서대로 구현해보자.\r\n<br/><br/>\r\n\r\n&nbsp;① 한 줄에 3개씩 게시글 표시 - 완료<br/>\r\n&nbsp;② 검색 기능<br/>\r\n&nbsp;③ 전체 목록을 표시하는 버튼<br/>\r\n&nbsp;④ 게시글을 클릭하면 상세 페이지로 이동\r\n<br/><br/>\r\n\r\n##### ② 게시글 검색, ③ 전체 목록 표시 기능 구현\r\n\r\n현재 보고 있는 블로그에는 여러가지 항목 검색이 가능하지만, 여기서는 제목 검색 기능만 작성해보았다.<br/>\r\n우선 검색어를 입력하는 input에 event를 부여하였고, input 입력 값을 동적으로 data 변수에 바인딩하도록 v-model을 설정했다.<br/>\r\n그리고 전체보기 버튼을 클릭하면 다시 전체 게시글 목록을 불러오는 메서드를 바인딩했다.\r\n<br/><br/>\r\n\r\nsrc/components/LogList.vue\r\n\r\n```\r\n<template>\r\n  <v-row class="category">\r\n    <v-col cols="9">\r\n      <v-chip prepend-icon="mdi-list-box-outline" link @click="fnSeeAll"\r\n        >전체보기</v-chip\r\n      >\r\n    </v-col>\r\n\r\n    <v-col cols="3">\r\n      <v-text-field\r\n        variant="underlined"\r\n        v-model="searchKeyword" // v-model 설정\r\n        append-icon="mdi-magnify"\r\n        placeholder="검색어 입력"\r\n        @click:append="fnSearchPosts" // click 이벤트\r\n        @keyup="fnSearchPosts" // keyup 이벤트\r\n      ></v-text-field>\r\n    </v-col>\r\n  </v-row>\r\n  .\r\n  .\r\n  .\r\n</template>\r\n```\r\n\r\n① v-model="데이터 변수명"<br/>\r\n­­ + 해당 input의 값이 변경될 때마다, script data에 선언한 변수에 동적으로 바인딩된다.\r\n<br/><br/>\r\n\r\n② @이벤트="로직 or 메서드"<br/>\r\n­­ + 해당 element에 지정한 이벤트가 발생했을 때, 호출할 로직을 설정한다.<br/>\r\n­­ + click, keyup, keydown 등등 javascript에서 사용하던 event이름을 입력한다.<br/>\r\n­­ + @click:append는 vuetify component를 사용하는 경우, append-icon에 이벤트 부여하는 방식이다.\r\n<br/><br/>\r\n\r\n다음으로는 v-model로 동적으로 바인딩될 data 변수 선언과 click, keyup 시 실행할 메서드를 작성했다.\r\n\r\nsrc/components/LogList.vue\r\n\r\n```\r\n<script>\r\nimport posts from "/public/json/_posts.json";\r\n\r\nexport default {\r\n  name: "loggingList",\r\n  data() {\r\n    return {\r\n      displayPosts: null,\r\n      rows: 0,\r\n      searchKeyword: "", // data searchKeyword 추가\r\n    };\r\n  },\r\n  .\r\n  .\r\n  .\r\n  methods: {\r\n    .\r\n    .\r\n    .\r\n    // 검색 기능 메서드 추가\r\n    fnSearchPosts(evt) {\r\n      if (\r\n        evt.keyCode == null || // 1. 검색 버튼 마우스 클릭\r\n        (evt.keyCode != null && evt.keyCode == "13") // 2. 엔터입력\r\n      ) {\r\n        // 동적으로 변경되는 data 값 변수 선언\r\n        var key = this.searchKeyword.trim();\r\n\r\n        // 검색어 null 체크\r\n        if (key == "") {\r\n          alert("검색어를 입력해주세요.");\r\n          return false;\r\n        }\r\n\r\n        // displayPosts 변경\r\n        // 전체 포스트 get -> title에 key가 포함된 게시물만 조회\r\n        this.displayPosts = this.getAllPosts(posts).filter(\r\n          (post) => post.title.toUpperCase().indexOf(key.toUpperCase()) > -1\r\n        );\r\n\r\n        // rows 설정\r\n        this.rows = this.displayPosts.length / 3;\r\n      }\r\n    },\r\n  }\r\n```\r\n\r\n제목 검색과 전체 목록 보기 기능 구현에 필요한 설정이 완료되었고, 자세하게는 아래와 같이 동작한다.\r\n<br/><br/>\r\n\r\n① 검색 기능<br/>\r\n&nbsp;⑴ 검색 input에 값을 입력하면 동적으로 searchKeyword에 바인딩<br/>\r\n&nbsp;⑵ 검색 버튼 혹은 엔터를 입력했을 때, 검색 메서드 실행<br/>\r\n&nbsp;⑶ 검색어를 입력하지 않으면 alert를 띄우고 return false<br/>\r\n&nbsp;⑷ 검색어 입력 시, 검색어가 제목에 포함된 post를 조회하여 displayPosts 값 변경<br/>\r\n&nbsp;⑸ displayPosts 변경된 값을 화면에 출력<br/>\r\n&nbsp;⑹ watch에서 displayPosts 값 변경을 감지하여 전체 row수 설정<br/>\r\n&nbsp;⑺ watch에서 10ms 후 setPostBg() 실행하여 랜덤으로 게시물 배경색 지정\r\n<br/><br/>\r\n\r\n② 전체 목록 보기 기능<br/>\r\n&nbsp;⑴ 전체 보기 버튼 클릭 시 fnSeeAll() 메서드 실행<br/>\r\n&nbsp;⑵ displayPosts 값을 전체 posts 값으로 변경<br/>\r\n&nbsp;⑶ displayPosts 변경된 값을 화면에 출력<br/>\r\n&nbsp;⑷ watch에서 displayPosts 값 변경을 감지하여 전체 row수 설정<br/>\r\n&nbsp;⑸ watch에서 10ms 후 setPostBg() 실행하여 랜덤으로 게시물 배경색 지정\r\n<br/><br/>\r\n\r\n다음으로는 게시물 상세 내용을 확인하는 기능을 구현해보자.😎\r\n'}}]);
//# sourceMappingURL=511.e2a18ed9.js.map