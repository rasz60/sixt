{"version":3,"file":"js/772.35ff4bc8.js","mappings":"kIAAA,w0K","sources":["webpack://sixt.github.io/./public/posts/g1/seq3.md"],"sourcesContent":["export default \"### App.vue\\n\\n우선 App.vue 파일 소스를 먼저 들여다보자.<br/><br/>\\n\\nApp.vue 파일은 vue의 최상위 부모 페이지이다. 첫 번째 포스트에서 main.js에 사용할 dependency를 나열하여 적용했다.<br/>\\n다시 들여다보면 나열한 dependency를 결국 import해놓았던 App.vue에 mount한 것을 볼 수 있다.<br/>\\n그래서 main.js에 선언한 dependency를 App.vue에서 불러와서 쓸 수 있다.\\n<br/><br/>\\n\\n① `<script setup>`\\n\\n­ + import해야 할 vue 파일을 선언했다. import ${변수명} from ${파일 경로}; 와 같은 형태로 선언한다.<br/>\\n­ + 파일 경로에 '@/'는 실제로는 'src/'로 변환되며, jsconfig.json 파일에 paths 속성에 기본으로 설정되어 있고 마음대로 추가/수정할 수도 있다.\\n\\n```\\n<script setup>\\nimport MenuView from \\\"@/views/MenuView.vue\\\";\\nimport ContentView from \\\"@/views/ContentView.vue\\\";\\n</script>\\n```\\n\\n② `<template>`\\n\\n­ + [Vuetify🔗](https://vuetifyjs.com/en/components/all/#form-inputs-and-controls)에서 제공하는 Grid component인 v-row로 메뉴(3) : 컨텐츠(9) 로 나누었다.<br/>\\n­ + 그 안에 위에서 import한 MenuView와 ContentView를 적용했다.<br/>\\n\\n```\\n<template>\\n  <v-container id=\\\"container\\\">\\n    <v-row id=\\\"main\\\">\\n      <v-col cols=\\\"3\\\" id=\\\"menu\\\">\\n        <MenuView />\\n      </v-col>\\n      <v-col cols=\\\"9\\\">\\n        <ContentView />\\n      </v-col>\\n    </v-row>\\n  </v-container>\\n</template>\\n```\\n\\n③ `<script>`\\n\\n­ + vue의 생성 주기에 따른 script 소스, vue파일에서 사용할 model 부분이 모두 들어가는데 나중에 좀 더 상세히 알아보자.\\n\\n```\\n<script>\\nexport default {\\n  name: \\\"app\\\",\\n};\\n</script>\\n```\\n\\n④ `<style>`\\n\\n­ + template에 들어가는 html을 디자인하는 부분이다.<br/>\\n­ + scss로 작성했고, [Vuetify🔗](https://vuetifyjs.com/en/components/all/#form-inputs-and-controls) component의 class 명을 가지고 나름의 커스텀 작업을 했다.<br/>\\n­ + style은 욕심 있으신 분들은 직접 작성하고, 디자인이 별로 상관없다면 그대로 긁어서 사용하자.<br/>\\n\\n```\\n<style lang=\\\"scss\\\">\\n.v-container {\\n  padding-top: 3rem !important;\\n  min-height: 800px;\\n\\n  #main {\\n    height: auto;\\n    padding: 0;\\n  }\\n\\n  #menu {\\n    height: auto;\\n    padding-left: 1em;\\n    padding-right: 3em;\\n  }\\n}\\n</style>\\n```\\n\\n### MenuView.vue\\n\\n다음은 메뉴 소스를 보자.<br/>\\n참고로 App.vue를 제외한 모든 .vue 파일은 'Menu'+'View'처럼 2개 이상의 단어를 조합하는 형태로 파일명을 지어야하는 규칙이 있다.\\n<br/><br/>\\n\\n① `<template>`\\n\\n­ + 역시 [Vuetify](https://vuetifyjs.com/en/components/all/#form-inputs-and-controls)에서 제공하는 v-list, v-icon등을 사용해서 완성했다.<br/>\\n­ + @click은 vue에서 해당 엘리먼트에 이벤트를 바인딩하는 방식이다. 아래 v-icon 을 클릭하면, newWindow라는 method를 실행하고 git 주소를 파라미터로 넘긴다.\\n\\n```\\n<template>\\n  <v-layout id=\\\"menuSection\\\">\\n    <!-- 최상단 프로필 부분 start -->\\n    <v-list id=\\\"profile\\\">\\n      <v-list-item\\n        prepend-avatar=\\\"${프로필 사진}\\\"\\n        title=\\\"${프로필 이름}\\\"\\n        subtitle=\\\"${메일 주소}\\\"\\n      >\\n        <div id=\\\"social\\\">\\n          <v-icon\\n            icon=\\\"mdi-github\\\"\\n            @click=\\\"newWindow(`${깃 주소}`)\\\"\\n          />\\n        </div>\\n      </v-list-item>\\n    </v-list>\\n    <!-- 최상단 프로필 부분 end -->\\n\\n    <v-divider></v-divider>\\n\\n    <!-- 메뉴 item 부분 start -->\\n    <v-list density=\\\"compact\\\" nav id=\\\"nav\\\">\\n      <v-list-item\\n        prepend-icon=\\\"mdi-note-edit-outline\\\"\\n        title=\\\"LOGGING\\\"\\n        value=\\\"blog\\\"\\n        class=\\\"navItems\\\"\\n      >\\n      </v-list-item>\\n    </v-list>\\n    <!-- 메뉴 item 부분 end -->\\n  </v-layout>\\n</template>\\n```\\n\\n② `<script>`\\n\\n­ + data, methods라는 새로운 속성이 등장했다. 이외에도 create(), mounted(), watch 등등 여러가지를 사용할 수 있다.<br/>\\n­ + data : return 안에 예시처럼 속성을 명시해주고 값을 변경하여 동적으로 사용할 수 있다.<br/>\\n­ + methods : 말 그대로 사용할 method들을 정의해놓는 곳이다. 콤마로 구분하여 나열한다.\\n\\n```\\n<script>\\nexport default {\\n  name: \\\"menuView\\\",\\n  data() {\\n    return {\\n        /* 예시\\n        menu: null,\\n        items: [],\\n        */\\n    };\\n  },\\n  methods: {\\n    newWindow(url) {\\n      window.open(\\\"about:blank\\\").location.href = url;\\n    },\\n  },\\n};\\n</script>\\n```\\n\\n③ `style`\\n\\n­ + style은 자세히 설명할만한 건 딱히 없고, 프로필 이미지와 깃 허브 아이콘에 마우스 오버하면 1.15배 커지게 만드는 잔기술 정도가 들어갔다.\\n\\n```\\n#menuSection {\\n  display: block;\\n  position: relative;\\n  height: 90vh;\\n  background-color: rgba(247, 165, 1, 0.65);\\n  border-radius: 10px;\\n  padding: 10px;\\n  box-shadow: 0.3em 0.3em 1em lightgray;\\n\\n  transition: all 10ms linear;\\n\\n  /* v-list custom */\\n  .v-list {\\n    background-color: transparent;\\n    color: #1a1a1a;\\n\\n    .v-list-item-title {\\n      font-weight: 400;\\n    }\\n  }\\n\\n  /* profile section custom */\\n  #profile {\\n    width: 100%;\\n    margin-bottom: 10px;\\n\\n    .v-avatar {\\n      width: 150px;\\n      height: 150px;\\n      background-color: ghostwhite;\\n    }\\n    .v-avatar img {\\n      width: 100%;\\n    }\\n    .v-avatar:hover {\\n      cursor: pointer;\\n    }\\n    .v-avatar:hover img {\\n      transition-property: all; /*모든부분 변화*/\\n      transition-duration: 0.2s; /*0.2s동안 변화*/\\n      transition-timing-function: linear; /*일정한 속도로 변화*/\\n      transition-delay: 0; /*즉시변화-> 0이 default값이므로 생략 가능*/\\n      transform: scale(1.15); /* 1.15배 크기로 변화*/\\n    }\\n\\n    div#social {\\n      margin-top: 10px;\\n\\n      .v-icon {\\n        padding: 18px !important;\\n        cursor: pointer;\\n      }\\n\\n      .v-icon:hover {\\n        transition-property: all; /*모든부분 변화*/\\n        transition-duration: 0.2s; /*0.2s동안 변화*/\\n        transition-timing-function: linear; /*일정한 속도로 변화*/\\n        transition-delay: 0; /*즉시변화-> 0이 default값이므로 생략 가능*/\\n        transform: scale(1.15); /* 1.15배 크기로 변화*/\\n      }\\n    }\\n  }\\n\\n  /* nav section custom */\\n  #nav .navItems {\\n    margin: 0.2rem;\\n    padding: 1.2rem;\\n    font-size: 1.2rem;\\n\\n    .v-list-item-title {\\n      text-align: center;\\n      font-size: 1.2rem;\\n    }\\n  }\\n}\\n```\\n\\n마지막 ContentView.vue 파일은 아직은 소스가 간단해서 별다르게 설명할 점이 없다.<br/>\\n다음 포스트에서 RouterView를 사용하는 방식으로 변경하면서 설명을 이어가겠다.🙋‍♂️\\n<br/><br/>\\n\";"],"names":[],"sourceRoot":""}